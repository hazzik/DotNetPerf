<h2>@ViewBag.Title</h2>
<div>
<label>Set Up
    <div class="editor-container">
      <div class="editor" data-bind="ace: SetUp.Code, aceOptions: { mode: 'csharp', theme: 'chrome' }"></div>
    </div>
</label>
</div>
<ul data-bind="foreach: Tests" class="list-unstyled">
    <li>
        <div>
            <input type="text" data-bind="value: Name"/>
        </div>
        <div>
            <div class="editor-container">
              <div class="editor" data-bind="ace: Code, aceOptions: { mode: 'csharp', theme: 'chrome' }"></div>
            </div>
        </div>
        <div>

            <a href='#' data-bind="click: $root.RemoveTest, visible: $root.Tests().length > 1">Remove</a>
        </div>
    </li>
</ul>
<div><input type="button" value="Add Test" data-bind="click: AddTest" />
</div>
<div>
<label>Tear Down
    <div class="editor-container">
      <div class="editor" data-bind="ace: TearDown.Code, aceOptions: { mode: 'csharp', theme: 'chrome' }"></div>
    </div>
</label>
</div>
<div><input type="button" value="Run" data-bind="click: Run, enabled: Tests().length > 0" />
</div>
<table data-bind="visible: Results().length > 0" class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Min Ticks</th>
            <th>Max Ticks</th>
            <th>Median Ticks</th>
            <th>Standard Deviation Ticks</th>
            <th>Error</th>
        </tr>
    </thead>
    <tbody data-bind="foreach: Results">
        <tr>
            <td data-bind="text: Name"></td>
            <td data-bind="text: MinTicks"></td>
            <td data-bind="text: MaxTicks"></td>
            <td data-bind="text: MedianTicks"></td>
            <td data-bind="text: StandardDeviationTicks"></td>
            <td data-bind="text: Error"></td>
        </tr>
    </tbody>
</table>
<script> 
    var Benchmark = function () {
        var self = this;
        self.SetUp = new BenchmarkUnit();
        self.TearDown = new BenchmarkUnit();
        self.Tests = ko.observableArray([
            new BenchmarkUnit("Code Snippet 1"),
            new BenchmarkUnit("Code Snippet 2")
        ]);
        self.Results = ko.observableArray([]);
        self.AddTest = function() {
            self.Tests.push(new BenchmarkUnit("Code Snippet "+ (self.Tests().length + 1)));
        };
        self.RemoveTest = function(test) {
            self.Tests.remove(test);
        }
        self.Run = function () {
            $.ajax({
                type: "POST",
                url: "/api/benchmark",
                contentType: "application/json",
                data: ko.toJSON(self)
            }).done(function (data) {
                self.SetResults(data);
            });
        };
        self.SetResults = function(results) {
            self.Results.removeAll();
            for (var i in results) {
                var r = results[i];
                self.Results.push(new BenchmarkResult(r.Name, r.MinTicks, r.MaxTicks, r.MedianTicks, r.StandardDeviationTicks, r.Error));
            }
        }
    };

    var BenchmarkUnit = function (name, code) {
        this.Name = ko.observable(name);
        this.Code = ko.observable(code);
    }
    
    var BenchmarkResult = function (name, minTicks, maxTicks, medianTicks, standardDeviationTicks, error) {
        this.Name = name;
        this.MinTicks = minTicks;
        this.MaxTicks = maxTicks;
        this.MedianTicks = medianTicks;
        this.StandardDeviationTicks = standardDeviationTicks;
        this.Error = error;
    }

    ko.applyBindings(new Benchmark());
</script>
